<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE Machine [
<!ELEMENT Machine (PunctChar*, Field*, FileChannel*, Register*, RegisterArray*, ConditionBit*, RAM*, Set*, Test*, Increment*, Shift*, Logical*, Arithmetic*, Branch*, TransferRtoR*, TransferRtoA*, TransferAtoR*, Decode*, SetCondBit*, IO*, MemoryAccess*, End, Comment*, EQU*, FetchSequence, MachineInstruction*, HighlightingInfo?, LoadingInfo?, IndexingInfo?, ProgramCounterInfo?, ModuleWindowsInfo?) >
<!ATTLIST Machine name CDATA "unnamed">
<!ELEMENT PunctChar EMPTY>
<!ATTLIST PunctChar char CDATA #REQUIRED use  (symbol|token|label|comment|pseudo|illegal) #REQUIRED>
<!ELEMENT Field (FieldValue*)>
<!ATTLIST Field name CDATA #REQUIRED type  (required|optional|ignored) #REQUIRED numBits CDATA #REQUIRED relativity (absolute|pcRelativePreIncr|pcRelativePostIncr) #REQUIRED defaultValue CDATA #REQUIRED signed (true|false) #REQUIRED id ID #REQUIRED>
<!ELEMENT FieldValue EMPTY>
<!ATTLIST FieldValue name CDATA #REQUIRED value CDATA #REQUIRED>
<!ELEMENT FileChannel EMPTY>
<!ATTLIST FileChannel file CDATA #REQUIRED id CDATA #REQUIRED>
<!ELEMENT Register EMPTY>
<!ATTLIST Register name CDATA #REQUIRED width CDATA #REQUIRED initialValue CDATA #REQUIRED readOnly (true|false) "false" id ID #REQUIRED>
<!ELEMENT RegisterArray (Register+)>
<!ATTLIST RegisterArray name CDATA #REQUIRED width CDATA #REQUIRED length CDATA #REQUIRED id ID #REQUIRED>
<!ELEMENT ConditionBit EMPTY>
<!ATTLIST ConditionBit name CDATA #REQUIRED bit CDATA #REQUIRED register IDREF #REQUIRED halt (true|false) "false" id ID #REQUIRED>
<!ELEMENT RAM EMPTY>
<!ATTLIST RAM name CDATA #REQUIRED length CDATA #REQUIRED id ID #REQUIRED cellSize CDATA "8">
<!ELEMENT Increment EMPTY>
<!ATTLIST Increment name CDATA #REQUIRED register IDREF #REQUIRED overflowBit IDREF #IMPLIED carryBit IDREF #IMPLIED delta CDATA #REQUIRED id ID #REQUIRED>
<!ELEMENT Arithmetic EMPTY>
<!ATTLIST Arithmetic name CDATA #REQUIRED type (ADD|SUBTRACT|MULTIPLY|DIVIDE) #REQUIRED source1 IDREF #REQUIRED source2 IDREF #REQUIRED destination IDREF #REQUIRED overflowBit IDREF #IMPLIED  carryBit IDREF #IMPLIED  id ID #REQUIRED>
<!ELEMENT TransferRtoR EMPTY>
<!ATTLIST TransferRtoR name CDATA #REQUIRED source IDREF #REQUIRED srcStartBit CDATA #REQUIRED dest IDREF #REQUIRED destStartBit CDATA #REQUIRED numBits CDATA #REQUIRED id ID #REQUIRED>
<!ELEMENT TransferRtoA EMPTY>
<!ATTLIST TransferRtoA name CDATA #REQUIRED source IDREF #REQUIRED srcStartBit CDATA #REQUIRED dest IDREF #REQUIRED destStartBit CDATA #REQUIRED numBits CDATA #REQUIRED index IDREF #REQUIRED indexStart CDATA #IMPLIED indexNumBits CDATA #IMPLIED id ID #REQUIRED>
<!ELEMENT TransferAtoR EMPTY>
<!ATTLIST TransferAtoR name CDATA #REQUIRED source IDREF #REQUIRED srcStartBit CDATA #REQUIRED dest IDREF #REQUIRED destStartBit CDATA #REQUIRED numBits CDATA #REQUIRED index IDREF #REQUIRED indexStart CDATA #IMPLIED indexNumBits CDATA #IMPLIED id ID #REQUIRED>
<!ELEMENT Shift EMPTY>
<!ATTLIST Shift name CDATA #REQUIRED source IDREF #REQUIRED destination IDREF #REQUIRED type (logical | arithmetic | cyclic) #REQUIRED direction (right | left) #REQUIRED distance CDATA #REQUIRED id ID #REQUIRED>
<!ELEMENT Branch EMPTY>
<!ATTLIST Branch name CDATA #REQUIRED amount CDATA #REQUIRED id ID #REQUIRED>
<!ELEMENT Logical EMPTY>
<!ATTLIST Logical name CDATA #REQUIRED source1 IDREF #REQUIRED source2 IDREF #REQUIRED destination IDREF #REQUIRED type (AND | OR | NAND | NOR | XOR | NOT) #REQUIRED id ID #REQUIRED>
<!ELEMENT Set EMPTY>
<!ATTLIST Set name CDATA #REQUIRED register IDREF #REQUIRED start CDATA #REQUIRED numBits CDATA #REQUIRED value CDATA #REQUIRED id ID #REQUIRED>
<!ELEMENT Test EMPTY >
<!ATTLIST Test name CDATA #REQUIRED register IDREF #REQUIRED start CDATA #REQUIRED numBits CDATA #REQUIRED comparison (EQ | NE | LT | GT | LE | GE ) #REQUIRED value CDATA #REQUIRED omission CDATA #REQUIRED id ID #REQUIRED>
<!ELEMENT Decode EMPTY >
<!ATTLIST Decode name CDATA #REQUIRED ir IDREF #REQUIRED id ID #REQUIRED>
<!ELEMENT IO EMPTY >
<!ATTLIST IO name CDATA #REQUIRED direction (input | output) #REQUIRED type (integer | ascii | unicode) #REQUIRED buffer IDREF #REQUIRED connection CDATA #IMPLIED id ID #REQUIRED>
<!ELEMENT MemoryAccess EMPTY >
<!ATTLIST MemoryAccess name CDATA #REQUIRED direction (read | write ) #REQUIRED memory IDREF #REQUIRED data IDREF #REQUIRED address IDREF #REQUIRED id ID #REQUIRED>
<!ELEMENT SetCondBit EMPTY >
<!ATTLIST SetCondBit name CDATA #REQUIRED bit IDREF #REQUIRED value (0 | 1) #REQUIRED id ID #REQUIRED>
<!ELEMENT End EMPTY>
<!ATTLIST End id ID #REQUIRED>
<!ELEMENT Comment EMPTY>
<!ATTLIST Comment name CDATA #REQUIRED id ID #REQUIRED>
<!ELEMENT Microinstruction EMPTY>
<!ATTLIST Microinstruction microRef IDREF #REQUIRED>
<!ELEMENT MachineInstruction (Microinstruction*)>
<!ATTLIST MachineInstruction name CDATA #REQUIRED opcode CDATA #REQUIRED instructionFormat CDATA #REQUIRED assemblyFormat CDATA #REQUIRED instructionColors CDATA #REQUIRED assemblyColors CDATA #REQUIRED>
<!ELEMENT FetchSequence (Microinstruction*) >
<!ELEMENT EQU EMPTY>
<!ATTLIST EQU name CDATA #REQUIRED value CDATA #REQUIRED>
<!ELEMENT HighlightingInfo (RegisterRAMPair*)>
<!ELEMENT RegisterRAMPair EMPTY>
<!ATTLIST RegisterRAMPair register IDREF #REQUIRED ram IDREF #REQUIRED dynamic (true|false) #REQUIRED>
<!ELEMENT LoadingInfo EMPTY>
<!ATTLIST LoadingInfo ram IDREF #IMPLIED startingAddress CDATA "0">
<!ELEMENT IndexingInfo EMPTY>
<!ATTLIST IndexingInfo indexFromRight CDATA "false">
<!ELEMENT ProgramCounterInfo EMPTY>
<!ATTLIST ProgramCounterInfo programCounter IDREF #REQUIRED>
<!ELEMENT ModuleWindowsInfo ((RegisterWindowInfo | RegisterArrayWindowInfo | RAMWindowInfo)*) >
<!ELEMENT RegisterWindowInfo EMPTY>
<!ATTLIST RegisterWindowInfo top CDATA "50" left CDATA "50" width CDATA "300" height CDATA "150" base (Decimal|Binary|Hexadecimal|Ascii|UnsignedDec|Unicode)  "Decimal">
<!ELEMENT RegisterArrayWindowInfo EMPTY>
<!ATTLIST RegisterArrayWindowInfo array IDREF #REQUIRED top CDATA "50" left CDATA "50" width CDATA "300" height CDATA "150" base (Decimal|Binary|Hexadecimal|Ascii|UnsignedDec|Unicode) "Decimal">
<!ELEMENT RAMWindowInfo EMPTY>
<!ATTLIST RAMWindowInfo ram IDREF #REQUIRED cellSize CDATA "1" top CDATA "50" left CDATA "50" width CDATA "450" height CDATA "450" contentsbase (Decimal|Binary|Hexadecimal|Ascii|UnsignedDec|Unicode) "Decimal" addressbase (Decimal|Binary|Hexadecimal) "Decimal">
]>

<Machine name="BASE_MACHINE3.CPU" >
	<!--............. Punctuation Options .............-->
	<PunctChar char="!" use="symbol" />
	<PunctChar char="#" use="symbol" />
	<PunctChar char="$" use="symbol" />
	<PunctChar char="%" use="symbol" />
	<PunctChar char="&amp;" use="symbol" />
	<PunctChar char="^" use="symbol" />
	<PunctChar char="_" use="symbol" />
	<PunctChar char="`" use="symbol" />
	<PunctChar char="*" use="symbol" />
	<PunctChar char="?" use="symbol" />
	<PunctChar char="@" use="symbol" />
	<PunctChar char="~" use="symbol" />
	<PunctChar char="+" use="symbol" />
	<PunctChar char="-" use="symbol" />
	<PunctChar char="(" use="token" />
	<PunctChar char=")" use="token" />
	<PunctChar char="," use="token" />
	<PunctChar char="/" use="token" />
	<PunctChar char="=" use="token" />
	<PunctChar char="[" use="token" />
	<PunctChar char="\" use="token" />
	<PunctChar char="]" use="token" />
	<PunctChar char="{" use="token" />
	<PunctChar char="|" use="token" />
	<PunctChar char="}" use="token" />
	<PunctChar char="." use="pseudo" />
	<PunctChar char=":" use="label" />
	<PunctChar char=";" use="comment" />

	<!--......... machine instruction fields ............-->
	<Field name="ADDR" type="required" numBits="12" relativity="absolute" signed="false" defaultValue="0" id="model.Field5e4645c1">
	</Field>
	<Field name="REGISTER" type="required" numBits="16" relativity="absolute" signed="false" defaultValue="0" id="model.Field9cadf41">
	</Field>
	<Field name="OP" type="required" numBits="4" relativity="absolute" signed="false" defaultValue="0" id="model.Field6f890db5">
	</Field>

	<!--............. FileChannels .................-->
	<!-- none -->

	<!--............. registers .....................-->
	<Register name="PC" width="12" initialValue="0" readOnly="false" id="model.module.Register100023cf" />
	<Register name="AR" width="12" initialValue="0" readOnly="false" id="model.module.Register6b658cf7" />
	<Register name="AC" width="16" initialValue="0" readOnly="false" id="model.module.Register23c118a8" />
	<Register name="DR" width="16" initialValue="0" readOnly="false" id="model.module.Register775ed2f2" />
	<Register name="E" width="1" initialValue="0" readOnly="false" id="model.module.Register66d1998d" />
	<Register name="I" width="1" initialValue="0" readOnly="false" id="model.module.Register2194b394" />
	<Register name="S" width="1" initialValue="0" readOnly="false" id="model.module.Registerabbfb56" />
	<Register name="IR" width="16" initialValue="0" readOnly="false" id="model.module.Registerbf361b1" />

	<!--............. register arrays ...............-->
	<!-- none -->

	<!--............. condition bits ................-->
	<ConditionBit name="CARRY-BIT" bit="0" register="model.module.Register66d1998d" halt="false" id="model.module.ConditionBit61848cb3" />
	<ConditionBit name="HALT-IT" bit="0" register="model.module.Registerabbfb56" halt="true" id="model.module.ConditionBit65889b04" />

	<!--............. rams ..........................-->
	<RAM name="M" length="4096" cellSize="16" id="model.module.RAM30bcbda8" />

	<!--............. set ...........................-->
	<Set name="AC&lt;-0" register="model.module.Register23c118a8" start="0" numBits="16" value="0" id="model.microinstruction.CpusimSet26cf182d" />

	<!--............. test ..........................-->
	<!-- none -->

	<!--............. increment .....................-->
	<Increment name="INCR&lt;-PC" register="model.module.Register100023cf" delta="1" id="model.microinstruction.Increment16eb9af0" />

	<!--............. shift .........................-->
	<!-- none -->

	<!--............. logical .......................-->
	<Logical name="AC&lt;-AC'" type="NOT" source1="model.module.Register23c118a8" source2="model.module.Register23c118a8" destination="model.module.Register23c118a8" id="model.microinstruction.Logical1145246b" />
	<Logical name="AC&lt;-AC^DR" type="AND" source1="model.module.Register23c118a8" source2="model.module.Register775ed2f2" destination="model.module.Register23c118a8" id="model.microinstruction.Logical5bb310a9" />
	<Logical name="AC&lt;-ACnandDR" type="AND" source1="model.module.Register23c118a8" source2="model.module.Register775ed2f2" destination="model.module.Register23c118a8" id="model.microinstruction.Logical49727de" />
	<Logical name="AC&lt;-ACnorDR" type="NOR" source1="model.module.Register23c118a8" source2="model.module.Register775ed2f2" destination="model.module.Register23c118a8" id="model.microinstruction.Logical61794ffb" />
	<Logical name="AC&lt;-ACorDR" type="OR" source1="model.module.Register23c118a8" source2="model.module.Register775ed2f2" destination="model.module.Register23c118a8" id="model.microinstruction.Logical59a759c3" />
	<Logical name="AC&lt;-ACxorDR" type="XOR" source1="model.module.Register23c118a8" source2="model.module.Register775ed2f2" destination="model.module.Register23c118a8" id="model.microinstruction.Logical1a522c06" />
	<Logical name="E&lt;-E" type="NOT" source1="model.module.Register66d1998d" source2="model.module.Register66d1998d" destination="model.module.Register66d1998d" id="model.microinstruction.Logical27c65145" />

	<!--............. arithmetic ....................-->
	<!-- none -->

	<!--............. branch ........................-->
	<!-- none -->

	<!--............. transferRtoR ..................-->
	<TransferRtoR name="AR&lt;-DR" source="model.module.Register775ed2f2" srcStartBit="0" dest="model.module.Register23c118a8" destStartBit="0" numBits="16" id="model.microinstruction.TransferRtoR6458de38" />
	<TransferRtoR name="AR&lt;-IR(4-15)" source="model.module.Registerbf361b1" srcStartBit="0" dest="model.module.Register6b658cf7" destStartBit="0" numBits="12" id="model.microinstruction.TransferRtoR7101f78f" />
	<TransferRtoR name="AR&lt;-PC" source="model.module.Register100023cf" srcStartBit="0" dest="model.module.Register6b658cf7" destStartBit="0" numBits="12" id="model.microinstruction.TransferRtoR239ee832" />

	<!--............. transferRtoA ..................-->
	<!-- none -->

	<!--............. transferAtoR ..................-->
	<!-- none -->

	<!--............. decode ........................-->
	<Decode name="DECODE&lt;-IR" ir="model.module.Registerbf361b1" id="model.microinstruction.Decode1f396fe5" />

	<!--............. set condition bit .............-->
	<SetCondBit name="HALT" bit="model.module.ConditionBit65889b04" value="1" id="model.microinstruction.SetCondBit4b32db48" />

	<!--............. io ............................-->
	<IO name="INPUT" direction="input" type="integer" buffer="model.module.Register23c118a8" connection="[Console]" id="model.microinstruction.IO602ecbc3" />
	<IO name="OUTPUT" direction="output" type="integer" buffer="model.module.Register23c118a8" connection="[Console]" id="model.microinstruction.IO3d1bb415" />

	<!--............. memory access .................-->
	<MemoryAccess name="DR&lt;-M[AR]" direction="read" memory="model.module.RAM30bcbda8" data="model.module.Register775ed2f2" address="model.module.Register6b658cf7" id="model.microinstruction.MemoryAccess6370af4d" />
	<MemoryAccess name="IR-&lt;M[AR]" direction="read" memory="model.module.RAM30bcbda8" data="model.module.Registerbf361b1" address="model.module.Register6b658cf7" id="model.microinstruction.MemoryAccess31f91439" />
	<MemoryAccess name="M[AR]&lt;-AC" direction="write" memory="model.module.RAM30bcbda8" data="model.module.Register23c118a8" address="model.module.Register6b658cf7" id="model.microinstruction.MemoryAccess279fb116" />

	<!--............. end ...........................-->
	<End id="model.microinstruction.End474412ec" />

	<!--............. comment ...........................-->
	<!-- none -->

	<!--............. global equs ..................-->
	<!-- none -->

	<!--............. fetch sequence ................-->
	<FetchSequence>
		<Microinstruction microRef="model.microinstruction.TransferRtoR239ee832" />
		<Microinstruction microRef="model.microinstruction.MemoryAccess31f91439" />
		<Microinstruction microRef="model.microinstruction.Increment16eb9af0" />
		<Microinstruction microRef="model.microinstruction.TransferRtoR7101f78f" />
		<Microinstruction microRef="model.microinstruction.Decode1f396fe5" />
	</FetchSequence>

	<!--............. machine instructions ..........-->

	<MachineInstruction name="LDA" opcode="4" instructionFormat="OP ADDR" assemblyFormat="OP ADDR" instructionColors="#99a392 #82e0d7" assemblyColors="#99a392 #82e0d7" >
		<Microinstruction microRef="model.microinstruction.MemoryAccess6370af4d" />
		<Microinstruction microRef="model.microinstruction.TransferRtoR6458de38" />
		<Microinstruction microRef="model.microinstruction.End474412ec" />
	</MachineInstruction>

	<MachineInstruction name="CME" opcode="7100" instructionFormat="REGISTER" assemblyFormat="REGISTER" instructionColors="#cafc9b" assemblyColors="#cafc9b" >
		<Microinstruction microRef="model.microinstruction.Logical27c65145" />
		<Microinstruction microRef="model.microinstruction.End474412ec" />
	</MachineInstruction>

	<MachineInstruction name="CMA" opcode="7200" instructionFormat="REGISTER" assemblyFormat="REGISTER" instructionColors="#e18fba" assemblyColors="#e18fba" >
		<Microinstruction microRef="model.microinstruction.Logical1145246b" />
		<Microinstruction microRef="model.microinstruction.End474412ec" />
	</MachineInstruction>

	<MachineInstruction name="CLA" opcode="7800" instructionFormat="REGISTER" assemblyFormat="REGISTER" instructionColors="#d0fca1" assemblyColors="#d0fca1" >
		<Microinstruction microRef="model.microinstruction.CpusimSet26cf182d" />
		<Microinstruction microRef="model.microinstruction.SetCondBit4b32db48" />
	</MachineInstruction>

	<MachineInstruction name="NOT" opcode="3" instructionFormat="OP ADDR" assemblyFormat="OP ADDR" instructionColors="#b6c380 #8ed5c3" assemblyColors="#b6c380 #8ed5c3" >
		<Microinstruction microRef="model.microinstruction.MemoryAccess6370af4d" />
		<Microinstruction microRef="model.microinstruction.Logical1145246b" />
		<Microinstruction microRef="model.microinstruction.End474412ec" />
	</MachineInstruction>

	<MachineInstruction name="NOR" opcode="2" instructionFormat="OP ADDR" assemblyFormat="OP ADDR" instructionColors="#a8faa7 #8a96d5" assemblyColors="#a8faa7 #8a96d5" >
		<Microinstruction microRef="model.microinstruction.MemoryAccess6370af4d" />
		<Microinstruction microRef="model.microinstruction.Logical61794ffb" />
		<Microinstruction microRef="model.microinstruction.End474412ec" />
	</MachineInstruction>

	<MachineInstruction name="XOR" opcode="5" instructionFormat="OP ADDR" assemblyFormat="OP ADDR" instructionColors="#d1dc86 #bdc3fa" assemblyColors="#d1dc86 #bdc3fa" >
		<Microinstruction microRef="model.microinstruction.MemoryAccess6370af4d" />
		<Microinstruction microRef="model.microinstruction.Logical1a522c06" />
		<Microinstruction microRef="model.microinstruction.End474412ec" />
	</MachineInstruction>

	<MachineInstruction name="OR" opcode="1" instructionFormat="OP ADDR" assemblyFormat="OP ADDR" instructionColors="#e1e2a1 #cf9b92" assemblyColors="#e1e2a1 #cf9b92" >
		<Microinstruction microRef="model.microinstruction.MemoryAccess6370af4d" />
		<Microinstruction microRef="model.microinstruction.Logical59a759c3" />
		<Microinstruction microRef="model.microinstruction.End474412ec" />
	</MachineInstruction>

	<MachineInstruction name="AND" opcode="0" instructionFormat="OP ADDR" assemblyFormat="OP ADDR" instructionColors="#9deae7 #9181b0" assemblyColors="#9deae7 #9181b0" >
		<Microinstruction microRef="model.microinstruction.MemoryAccess6370af4d" />
		<Microinstruction microRef="model.microinstruction.Logical5bb310a9" />
		<Microinstruction microRef="model.microinstruction.End474412ec" />
	</MachineInstruction>

	<MachineInstruction name="STA" opcode="6" instructionFormat="OP ADDR" assemblyFormat="OP ADDR" instructionColors="#f8c1c6 #b5a7b0" assemblyColors="#f8c1c6 #b5a7b0" >
		<Microinstruction microRef="model.microinstruction.MemoryAccess279fb116" />
		<Microinstruction microRef="model.microinstruction.End474412ec" />
	</MachineInstruction>

	<MachineInstruction name="INP" opcode="f800" instructionFormat="REGISTER" assemblyFormat="REGISTER" instructionColors="#87a5bc" assemblyColors="#87a5bc" >
		<Microinstruction microRef="model.microinstruction.IO602ecbc3" />
		<Microinstruction microRef="model.microinstruction.End474412ec" />
	</MachineInstruction>

	<MachineInstruction name="OUT" opcode="f400" instructionFormat="REGISTER" assemblyFormat="REGISTER" instructionColors="#b1c999" assemblyColors="#b1c999" >
		<Microinstruction microRef="model.microinstruction.IO3d1bb415" />
		<Microinstruction microRef="model.microinstruction.End474412ec" />
	</MachineInstruction>

	<MachineInstruction name="HLT" opcode="e001" instructionFormat="REGISTER" assemblyFormat="REGISTER" instructionColors="#89abbb" assemblyColors="#89abbb" >
		<Microinstruction microRef="model.microinstruction.SetCondBit4b32db48" />
		<Microinstruction microRef="model.microinstruction.End474412ec" />
	</MachineInstruction>

	<!--............. highlighting info .............-->
	<HighlightingInfo>
		<RegisterRAMPair register="model.module.Register100023cf" ram="model.module.RAM30bcbda8" dynamic="false" />
	</HighlightingInfo>

	<!--............. loading info ..................-->
	<LoadingInfo ram="model.module.RAM30bcbda8" startingAddress="0" />

	<!--............. indexing info ............-->
	<IndexingInfo indexFromRight="true" />

	<!--............. program counter info ..................-->

</Machine>
